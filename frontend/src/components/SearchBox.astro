---
// Search box component for filtering cards
---

<div class="search-container">
  <input 
    type="text" 
    id="card-search" 
    placeholder="Search" 
    class="search-input"
  />
  <div class="search-icon" id="search-icon">
    <svg id="magnifying-glass" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="11" cy="11" r="8"></circle>
      <path d="m21 21-4.35-4.35"></path>
    </svg>
    <svg id="clear-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="display: none;">
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  </div>
</div>

<script>
  function initializeSearch() {
    const searchInput = document.getElementById('card-search') as HTMLInputElement;
    const magnifyingGlass = document.getElementById('magnifying-glass') as SVGElement;
    const clearIcon = document.getElementById('clear-icon') as SVGElement;
    const searchIcon = document.getElementById('search-icon') as HTMLElement;
    
    if (!searchInput || !magnifyingGlass || !clearIcon || !searchIcon) return;

    function updateIcon() {
      const hasText = searchInput.value.trim().length > 0;
      if (hasText) {
        magnifyingGlass.style.display = 'none';
        clearIcon.style.display = 'block';
        searchIcon.style.cursor = 'pointer';
        searchIcon.style.pointerEvents = 'auto';
      } else {
        magnifyingGlass.style.display = 'block';
        clearIcon.style.display = 'none';
        searchIcon.style.cursor = 'default';
        searchIcon.style.pointerEvents = 'none';
      }
    }

    searchInput.addEventListener('input', (e) => {
      const searchTerm = (e.target as HTMLInputElement).value.toLowerCase().trim();
      updateIcon();
      filterCards(searchTerm);
    });

    // Handle clear icon click
    searchIcon.addEventListener('click', () => {
      if (searchInput.value.trim().length > 0) {
        searchInput.value = '';
        updateIcon();
        filterCards('');
        searchInput.focus();
      }
    });

    // Handle touch events for mobile
    searchIcon.addEventListener('touchend', (e) => {
      if (searchInput.value.trim().length > 0) {
        e.preventDefault();
        searchInput.value = '';
        updateIcon();
        filterCards('');
        searchInput.focus();
      }
    });

    // Initial icon state
    updateIcon();
  }

  function filterCards(searchTerm: string) {
    const grid = document.getElementById('grid');
    let searchResultsContainer = document.getElementById('search-results');
    
    if (searchTerm === '') {
      // Show normal grid, hide search results
      if (grid) grid.style.display = 'grid';
      if (searchResultsContainer) {
        searchResultsContainer.style.opacity = '0';
        setTimeout(() => {
          if (searchResultsContainer && searchResultsContainer.parentNode) {
            searchResultsContainer.parentNode.removeChild(searchResultsContainer);
          }
        }, 300);
      }
      
      // Show all card containers
      document.querySelectorAll('.cards-container').forEach(container => {
        (container as HTMLElement).style.display = 'grid';
      });
      return;
    }
    
    // Hide grid and card containers
    if (grid) grid.style.display = 'none';
    document.querySelectorAll('.cards-container').forEach(container => {
      (container as HTMLElement).style.display = 'none';
    });
    
    // Create or get search results container
    if (!searchResultsContainer) {
      searchResultsContainer = document.createElement('div');
      searchResultsContainer.id = 'search-results';
      searchResultsContainer.style.cssText = `
        display: flex;
        flex-direction: column;
        gap: 15px;
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s ease;
      `;
      
      const container = document.querySelector('.container');
      if (container) {
        container.appendChild(searchResultsContainer);
      }
    }
    
    // Clear previous results
    searchResultsContainer.innerHTML = '';
    
    // Collect matching cards from all containers
    const matchingCards: { element: HTMLElement, data: any }[] = [];
    
    document.querySelectorAll('.cards-container .card').forEach(card => {
      const cardElement = card as HTMLElement;
      const cardText = cardElement.querySelector('.card-text')?.textContent?.toLowerCase() || '';
      const cardData = cardElement.getAttribute('data-full-content');
      let searchableText = cardText;
      
      if (cardData) {
        try {
          const data = JSON.parse(cardData);
          const title = data.metadata?.title || data.title || '';
          const description = data.metadata?.description || data.description || '';
          searchableText += ` ${title.toLowerCase()} ${description.toLowerCase()}`;
          
          if (searchableText.includes(searchTerm)) {
            matchingCards.push({ element: cardElement, data });
          }
        } catch (e) {
          if (searchableText.includes(searchTerm)) {
            matchingCards.push({ element: cardElement, data: null });
          }
        }
      } else if (searchableText.includes(searchTerm)) {
        matchingCards.push({ element: cardElement, data: null });
      }
    });
    
    // Sort matching cards to show featured items first
    matchingCards.sort((a, b) => {
      // Check if cards are holographic (which means they're featured)
      const isFeatureA = a.element.classList.contains('holographic');
      const isFeatureB = b.element.classList.contains('holographic');
      
      // Featured items first
      if (isFeatureA && !isFeatureB) return -1;
      if (!isFeatureA && isFeatureB) return 1;
      
      // Within same feature status, maintain original order
      return 0;
    });
    
    // Create list items for matching cards
    matchingCards.forEach(({ element, data }, index) => {
      const listItem = document.createElement('div');
      listItem.style.cssText = `
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 15px;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 10px;
        backdrop-filter: blur(10px);
        cursor: pointer;
        transition: all 0.3s ease;
        opacity: 0;
        transform: translateX(-20px);
      `;
      
      const img = element.querySelector('.card-image') as HTMLImageElement;
      const title = element.querySelector('.card-text')?.textContent || 'Untitled';
      
      listItem.innerHTML = `
        <img src="${img?.src || '/placeholder.jpg'}" alt="${title}" style="
          width: 60px;
          height: 80px;
          object-fit: cover;
          border-radius: 6px;
          flex-shrink: 0;
        ">
        <div style="
          color: #fff;
          flex: 1;
        ">
          <h3 style="
            margin: 0 0 5px 0;
            font-size: 16px;
            font-weight: bold;
          ">${title}</h3>
          <p style="
            margin: 0;
            font-size: 14px;
            opacity: 0.7;
            line-height: 1.4;
          ">${data?.metadata?.description || data?.description || 'No description available'}</p>
        </div>
      `;
      
      // Add click handler to open modal
      listItem.addEventListener('click', () => {
        // Trigger the same modal as clicking the original card
        element.click();
      });
      
      listItem.addEventListener('mouseenter', () => {
        listItem.style.background = 'rgba(255, 215, 0, 0.1)';
        listItem.style.transform = 'translateX(5px)';
      });
      
      listItem.addEventListener('mouseleave', () => {
        listItem.style.background = 'rgba(0, 0, 0, 0.3)';
        listItem.style.transform = 'translateX(0)';
      });
      
      searchResultsContainer.appendChild(listItem);
      
      // Animate in with stagger
      setTimeout(() => {
        listItem.style.opacity = '1';
        listItem.style.transform = 'translateX(0)';
      }, index * 50);
    });
    
    // Show search results container
    requestAnimationFrame(() => {
      searchResultsContainer.style.opacity = '1';
      searchResultsContainer.style.transform = 'translateY(0)';
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSearch);
  } else {
    initializeSearch();
  }

  // Also initialize when page loads as backup
  window.addEventListener('load', initializeSearch);
</script>

<style>
  .search-container {
    position: relative;
    width: 100%;
    max-width: 400px;
    margin: 0 auto 30px auto;
  }

  .search-input {
    width: 100%;
    padding: 12px 50px 12px 20px;
    border: none;
    border-radius: 25px;
    background: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    color: #fff;
    font-size: 16px;
    font-family: 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', 'Yu Gothic UI', 'Meiryo UI', 'MS PGothic', 'Osaka', sans-serif;
    outline: none;
    transition: all 0.3s ease;
    box-sizing: border-box;
  }

  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.6);
  }

  .search-input:focus {
    background: rgba(0, 0, 0, 0.5);
    box-shadow: 0 0 20px rgba(255, 215, 0, 0.3);
  }

  .search-icon {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    color: rgba(255, 255, 255, 0.7);
    pointer-events: none;
    transition: all 0.2s ease;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-icon:hover {
    background: rgba(255, 255, 255, 0.1);
    color: #ffd700;
  }

  .search-icon svg {
    width: 100%;
    height: 100%;
  }

  .search-input:focus + .search-icon {
    color: #ffd700;
  }
</style>