---
// Client-side component for card interactions
---

<script>
  let throttleTimeout = null;

  function handleThrottledHolo(card: HTMLElement, rotateX: number, rotateY: number) {
    if (throttleTimeout) return;
    
    throttleTimeout = setTimeout(() => {
      const hueShift = (rotateY + rotateX) * 4;
      
      if (card.classList.contains('holographic')) {
        const image = card.querySelector('.card-image') as HTMLImageElement;
        if (image) {
          requestAnimationFrame(() => {
            image.style.filter = `contrast(1.4) saturate(1.6) hue-rotate(${hueShift}deg) brightness(1.1)`;
          });
        }
      }
      
      if (card.classList.contains('foil')) {
        card.style.setProperty('--foil-hue', `${hueShift}deg`);
      }
      
      throttleTimeout = null;
    }, 55);
  }

  function handleDirectionalLight(card: HTMLElement, x: number, y: number, rect: DOMRect) {
    const cardFront = card.querySelector('.card-front') as HTMLElement;
    
    if (cardFront) {
      const lightX = (x / rect.width) * 100;
      const lightY = (y / rect.height) * 100;
      
      cardFront.style.setProperty('--light-x', `${lightX}%`);
      cardFront.style.setProperty('--light-y', `${lightY}%`);
    }
  }

  function handleCardInteraction(e: MouseEvent | TouchEvent) {
    const card = e.currentTarget as HTMLElement;
    const rect = card.getBoundingClientRect();
    
    let x: number, y: number;
    
    if (e instanceof MouseEvent) {
      x = e.clientX - rect.left;
      y = e.clientY - rect.top;
    } else {
      x = e.touches[0].clientX - rect.left;
      y = e.touches[0].clientY - rect.top;
    }
    
    const centerX = rect.width / 2;
    const centerY = rect.height / 2;
    
    const rotateX = (y - centerY) / centerY * -15;
    const rotateY = (x - centerX) / centerX * 15;
    
    card.style.transition = 'transform 0.1s ease-out';
    card.style.transform = `translateY(-30px) scale(1.15) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(20px)`;
    
    handleDirectionalLight(card, x, y, rect);
    
    if (card.classList.contains('holographic') || card.classList.contains('foil')) {
      handleThrottledHolo(card, rotateX, rotateY);
    }
  }

  function handleCardReset(e: Event) {
    const card = e.currentTarget as HTMLElement;
    
    if (throttleTimeout) {
      clearTimeout(throttleTimeout);
      throttleTimeout = null;
    }
    
    card.style.transition = 'all 0.3s ease';
    card.style.transform = 'translateY(0px) scale(1)';
    
    const cardFront = card.querySelector('.card-front') as HTMLElement;
    if (cardFront) {
      cardFront.style.setProperty('--light-x', '30%');
      cardFront.style.setProperty('--light-y', '30%');
    }
    
    if (card.classList.contains('holographic')) {
      const image = card.querySelector('.card-image') as HTMLImageElement;
      if (image) {
        image.style.transition = 'filter 0.3s ease';
        requestAnimationFrame(() => {
          image.style.filter = 'contrast(1.2) saturate(1.3) hue-rotate(0deg)';
        });
      }
    }
    
    if (card.classList.contains('foil')) {
      card.style.setProperty('--foil-hue', '0deg');
    }
  }

  function openModal(card: HTMLElement) {
    card.classList.add('flipping');
    
    setTimeout(() => {
      const cardImage = card.querySelector('.card-image') as HTMLImageElement;
      const cardText = card.querySelector('.card-text') as HTMLElement;
      
      if (!cardImage || !cardText) return;
      
      const modal = document.createElement('div');
      modal.className = 'modal';
      modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
      `;
      
      modal.innerHTML = `
        <div class="modal-overlay" style="
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.9);
          backdrop-filter: blur(10px);
        "></div>
        <div class="modal-content" style="
          position: absolute;
          top: 90px;
          left: 30px;
          right: 30px;
          bottom: 30px;
          background: rgba(0, 0, 0, 0.8);
          border-radius: 16px;
          overflow: hidden;
          display: flex;
          flex-direction: column;
          transform: scale(0.8);
          transition: transform 0.3s ease;
        ">
          <button class="modal-close" style="
            position: absolute;
            top: 15px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            border: none;
            color: #fff;
            font-size: 2rem;
            cursor: pointer;
            z-index: 10;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
          ">&times;</button>
          <img src="${cardImage.src}" alt="Tech" class="modal-image" style="
            width: 100%;
            height: 100%;
            object-fit: cover;
          ">
          <div class="modal-text" style="
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 30px;
            background: linear-gradient(
              to bottom,
              transparent 0%,
              rgba(0, 0, 0, 0.3) 20%,
              rgba(0, 0, 0, 0.8) 60%,
              rgba(0, 0, 0, 0.95) 100%
            );
            color: #fff;
            font-size: 1.5rem;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
            line-height: 1.4;
          ">${cardText.textContent}</div>
        </div>
      `;
      
      document.body.appendChild(modal);
      
      setTimeout(() => {
        modal.style.opacity = '1';
        modal.style.visibility = 'visible';
        const content = modal.querySelector('.modal-content') as HTMLElement;
        if (content) {
          content.style.transform = 'scale(1)';
        }
      }, 10);
      
      const closeModal = () => {
        modal.style.opacity = '0';
        modal.style.visibility = 'hidden';
        const content = modal.querySelector('.modal-content') as HTMLElement;
        if (content) {
          content.style.transform = 'scale(0.8)';
        }
        
        setTimeout(() => {
          if (modal.parentNode) {
            document.body.removeChild(modal);
          }
          card.classList.remove('flipping');
          
          card.style.transition = 'all 0.3s ease';
          card.style.transform = 'translateY(0px) scale(1)';
          
          const cardFront = card.querySelector('.card-front') as HTMLElement;
          if (cardFront) {
            cardFront.style.setProperty('--light-x', '30%');
            cardFront.style.setProperty('--light-y', '30%');
          }
          
          if (card.classList.contains('holographic')) {
            const image = card.querySelector('.card-image') as HTMLImageElement;
            if (image) {
              image.style.transition = 'filter 0.3s ease';
              requestAnimationFrame(() => {
                image.style.filter = 'contrast(1.2) saturate(1.3) hue-rotate(0deg)';
              });
            }
          }
          
          if (card.classList.contains('foil')) {
            card.style.setProperty('--foil-hue', '0deg');
          }
        }, 300);
      };
      
      const closeButton = modal.querySelector('.modal-close') as HTMLElement;
      const overlay = modal.querySelector('.modal-overlay') as HTMLElement;
      
      if (closeButton) closeButton.addEventListener('click', closeModal);
      if (overlay) overlay.addEventListener('click', closeModal);
      
      const handleEscape = (e: KeyboardEvent) => {
        if (e.key === 'Escape') {
          closeModal();
          document.removeEventListener('keydown', handleEscape);
        }
      };
      document.addEventListener('keydown', handleEscape);
    }, 600);
  }

  function initializeCards() {
    const cards = document.querySelectorAll('.card:not([data-initialized])');
    
    cards.forEach(card => {
      const cardEl = card as HTMLElement;
      
      // Mark as initialized to prevent duplicate listeners
      cardEl.setAttribute('data-initialized', 'true');
      
      cardEl.addEventListener('mousemove', handleCardInteraction);
      cardEl.addEventListener('mouseleave', handleCardReset);
      cardEl.addEventListener('touchmove', (e) => {
        e.preventDefault();
        handleCardInteraction(e);
      });
      cardEl.addEventListener('touchend', handleCardReset);
      
      cardEl.addEventListener('click', () => {
        openModal(cardEl);
      });
    });
  }

  document.addEventListener('DOMContentLoaded', initializeCards);
</script>